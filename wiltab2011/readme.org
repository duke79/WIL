scans/WILScan/mysql/wilson/keys/readme.txt
Sep 30, 2009
Feb 11, 2011  
Nov 29, 2011
ejf

* The database table 'wilson' has fields 'key,lnum,data'.
The 'key' field is in HK form, and is based directly on the Wilson data.
To integrate Wilson data with other lexicons, notably MW, differences in 
the key of table 'monier' and that of table 'wilson' need to be reconciled.
** discussion
I begin with the assumption that the MW key conventions should be the 
standard.  To derive keys for Wilson that conform to this standard 
requires a table associating the given Wilson key with a
key that is standardized.  This standardized key should
a. be encoded in SLP1, as is the key of MW
b. Spelling differences between wilson and MW should be reconciled.
   i. wilson uses a sandhi convention of doubling consonants after 
      'r' (and perhaps other letters), e.g. 'karmman', 'Darmma'.
      The doubling of these consonants should be removed, e.g. 'karman', 'Darma'
  ii. For roots, wilson often includes part of the DathaPatha anubandhas in the
      key.  These should be removed.

* step1
** wilson_key_dump.txt
  wilson_key_dump.sh  just dumps the mysql wilson keys into 
  wilson_key_dump.txt, which has 3 tab-delimited fields:
  key  Wilson key
  slp  SLP1 spelling of key
  num  number of records with the key (usu.=1,> 1 indicates key with
       more than 1 record in wilson table)
** (Feb 11, 2011)

 wilson_mw.sh
   partitions wilson_key_dump.txt into two files
    wilson_keys_mw.txt   if slp key found in mwtab
    wilson_keys_nonmw.txt if slp key NOT found in mwtab.
** Revision of Feb 14, 2011
   wilson_keys_nonmw.txt now has a simple xml structure:
  <c></c><wil>x</wil><mw>x</mw>
  c = comment (initially empty)
  wil = wilson spelling (in slp1)
  mw  = mw spelling (initially same value as wil)
 
 wilson_nonmw_corr.txt  has the same structure for records.
 It is used as an input.
 
  For a few records with odd characters in key,
  <c></c><wilorig>x0</wilorig><wil>x</wil><mw>x</mw>
* step2 (Feb 19, 2011)
** wiltab_dump.txt
php wiltab_dump.php wiltab_dump.txt > wiltab_dump_log.txt
 This reads the 'wiltab' mysql table at Cologne (the digitization of the
  Wilson dictionary), and prints the headword 'key' to output file
  wiltab_dump.txt.  In this digitization, the headword is spelled with
  the Harvard-Kyoto transliteration, and the program prints the headword
  in two spellings: the given HK spelling as first field, and the
  corresponding SLP1 spelling as the second field. The fields are
  tab-delimited.
The log file has 'bad' keys (slp : hk)
** sh wiltab_mw.sh
This scripts runs the following php program:
php wiltab_mw.php  wiltab_dump.txt  known.txt   wiltab_mw.txt regexp.txt ../../../mwxml/mw.xml > wiltab_mw.log

files wiltab_dump.txt (see above), known.txt (currently empty) and regexp.txt
 are inputs.  File wiltab_mw.txt is output.
The purpose of known.txt is to allow for corrections; however, since this
file is currently empty, the program details regarding its structure and
usage will be not be disussed further in this comment.
The regexp.txt file delineates several (33) rules describing systematic
spelling differences between Wilson and Monier-Williams.

The output file (wiltab_mw.txt) currently ignores Wilson headwords whose
spelling appears as a headword in Monier-Williams.  It prints a record
only for the problematic Wilson headwords.  This record has one of two forms:
(a) A rule from regexp.txt, when applied to the Wilson spelling, yields
    a headword in MW. In this case the output is
    <c>AUTO(RULE NAME)</c> <wil>[orig Wilson spelling]</wil> <mw>[MW spelling]</mw
(b) No rule leads from the Wilson spelling to the MW spelling.
    <c></c> <wil>[orig Wilson spelling]</wil> <mw>[orig Wilson spelling]</mw>

When this program is run currently (June 9, 2016),
 there are 8321 records in the output wiltab_mw.txt.  
 By contrast, the original similar examination yielded 8699 records;
 For possible future analysis, this previous result is in file
 prev_wiltab_mw.txt.
Note 1:  This current June 9, 2016 run uses an OLD version of wiltab_dump.txt.
 If further work is done, it should be done with a revised wiltab_dump.txt.
Note 2:  Computational note. This run took a long time (approx. 1 hour). This
 is a surprisingly long time.
* step2roots
** badkeys
php roots.php wilson_dproots.txt roots.txt spelling.txt > roots_log.txt
 The output files are roots.txt and roots_log.txt.
 wilson_dproots.txt and spelling.txt are input files. These files were
  constructed elsewhere, by some process not known for sure.
 Also, the monier-williams dictionary is an input.
 wilson_dproots.txt: this has 163 lines. Each line represents one headword
  from Wilson, which refers to a root and whose spelling in the text uses
  a dhatupatha spelling (i.e., with anubandhas); all of the spellings have
  a parenthesis.
  Each line has two spellings separated by ' : '; the first is SLP1 and 
  second is HK.
  Note1: By examining the current wil.xml, there are 162 cases where the <key2>
  element contains a parenthesis.  Thus, this is almost certainly the
  source of the wilson_dproots.txt cases.
  Note2: Consider the root 'gam' (to go). In Wilson, this is spelled 'gama',
   where the final 'a' is also an anubandha used in dhatapatha spellings.
   The wilson_dproots.txt file does not contain such cases.

 spelling.txt  Contains pairs of spellings X:Y.  See discussion of 
  program roots.php for semantics.

Discussion of roots.php
 The program reads wilson_dproots.txt a line at a time, and only uses the
  slp1 spelling, which it puts in variable $slp.
  It assumes the this spelling has the form 'X(Y', and puts the X into
  variable $root0.  In case $root0 has the form 'Za'. it drops the 'a' and
  puts the resulting spelling 'Z' into variable $root1 (if X does not end in
  'a', then $root1 is same as $root0).
  Finally, it checks if the spelling Z:W occurs in the spelling.txt file;
  if so it puts the spelings W into variable $root; otherwise, $root has
  the spelling Z.
 Now, the MW dictionary is consulted for the headword spelling in $root.
  And, moreover, if $root is found as a headword, the corresponding xml record
  for this headword in MW is examined for the presence of markup 
  `<vlex type="root">`, which is the way roots are identified in the 
  digitization of MW.
  If '$root' is not found as a root in MW, a message 'Wilson slp key=$slp'
    is written to the roots_log.txt file.
  if '$root' is found as a root in MW,  then a record is written to the
   roots.txt file of the form
   `<c>SP-ROOT</c> <wil>$slp</wil> <mw>$root</mw>`, giving the original
   dhatupatha spelling of the root ($slp) and the corresponding mw spelling
   ($root).

The result of the roots.php program is that 143 of the 163 original records
  in wilson_dproots.txt have a corresponding MW spelling as a root in roots.txt.
  20 case (written to roots_log.txt) have no such correspondence.

** otherkeys
php dumproots.php ../../step2/wiltab_dump.txt dumproots.txt
find records identifiable as roots ( <body>.*? r[.] )

The dumproots program examines each of the headwords from wiltab_dump.txt.
As originally written, it uses the hk-spelling of the key to find the
corresponding record in the MySql file 'wiltab' for Wilson (this at Cologne),
and searches for the regular expression `<body.*? r[.]`; the presence of
such a matching string is taken as evidence that the headword is a root in
Wilson.  If the headword from wiltab_dump.txt is found to be a root, the
corresponding original line (hk-spelling + TAB + slp1-spelling) of 
wiltab_dump.txt is written to dumproots.txt.

The original result was that 1585 roots were so written to dumproots.txt.

php roots.php dumproots.txt roots.txt spelling.txt > roots_log.txt
This program tries to find correspondences between the list of roots in
dumproots.txt and roots in MW.
It reads the SLP1 spelling of a root in dumproots.txt into variable $slp.
Variable $root0 has same value $slp.
If the spelling ends in 'a' (i.e., has form Xa), it puts X into variable
$root1; otherwise $root1 is the same as $root0.  
Now, it looks for the spelling $root = $root1 as a headword in MW; for any MW
 matches thus found, it checks if either `<vlex type="root">` is part of
 the MW record (indicating a standard root), or if `<vlex>Nom.<\/vlex>` is
 found (indicating a Denominative root in MW).
If $root1 is thus found as a root in MW, a record is written to the output.
 This record has one of two forms, depending on whether the spelling dropped
 an 'a' or not.
 If it dropped an 'a' (i.e., Wilson had 'a' as an anubandha in the spelling),
 `<c>SPa-ROOT</c> <wil>$slp</wil> <mw>$root</mw>`
 If the spelling didn't drop an 'a', the record is
 `<c>ROOT</c> <wil>$slp</wil> <mw>$root</mw>`.
If $root1 is not found as a root in MW,  the spelling.txt file is 
 consulted to see if there is an alternate spelling.  If there is an
 alternate spelling, and if that alternate spelling matches a root in MW,
 then a record
 `<c>SPb-ROOT</c> <wil>$slp</wil> <mw>$root</mw>`
 is written to roots.txt
Otherwise, a message is written to the log file roots_log.txt, indicating
 that the Wilson root could not be found as an MW root.

The results are that of 1585 Wilson roots identified (in dumproots.txt),
 1283 of them were confirmed as MW roots (in roots.txt).


** mdp
 PMS pointed out some problems with the 'dp' element in wiltab,
 and suggested correlation with Madhaviya DP.  This work is in 
 that direction
*** Change to attribute
 <dp><s>X</s></dp> => <dp v1="X"></dp>
 This change made in text editor (change of log_20110224-03.txt to
  log_20110224-03a.txt).
 Reason: 'X' was not in the text. It was computer. Thus, it should
 be an attribute, not part of the text.
Note: the 03a changes were instituted into wiltab.
*** 
php dpadj.php log_20110224-03a.txt log_20110226-01.txt spelling.txt matchman2.txt mdp.xml > dpadj.log
Note: 0226-01 was NOT instituted into wiltab.
This exercise indicates how a correspondence could be done, but is
incomplete in various dimensions.  In the dimension of coverage,
 this (-03a) includes only keys in otherkeys/roots.txt.
 It omits keys in (a) otherkeys/roots_log.txt,
 (b) badkeys/roots.txt and (c)badkeys/roots_log.txt

* alpha
list all the words in Wilson in order of lnum.
Flag those that are alphabetically in error.
php alpha.php alpha.txt
* step3/step3-1 (Mar 1, 2011
** wiltab_dump.txt
php wiltab_dump.php wiltab_dump.txt > wiltab_dump_log.txt
** filter
sh wiltab_mw-1.sh


* step3/step3-2 ?
* step3/step3-3
Notes made Nov 29, 2011 of programs rune on Mar2/3, 2011.
** wiltab_dump.txt
php wiltab_dump.php wiltab_dump.txt > wiltab_dump_log.txt
** filter
sh wiltab_mw.sh
i.e.
php wiltab_mw.php  wiltab_dump.txt  wiltab_mw-known-2a.txt   
   wiltab_mw-3-3.txt regexp-1-ma.txt > wiltab_mw-3-3.log
Program logic:
  Loosely expressed, the objective is to describe which wiltab keys
are NOT in mw, taking into account (a) previously described cases (from the
wiltab_mw-known-2a.txt file) and (b) various standardized spelling 
transformations (from the file regexp-2-ma.txt).  The non-matches are
put into wiltab_mw-3-3.txt file.  Some error messages appear in the log file.

There are 44270 headword keys in mw (= # of lines in wiltab_dump.txt).
There are 8354 (about 20%) of these headwords that are not immediately
found in mw.  Of these, about 500 have already been explained by MA 
(in the ..known file).  The

*** input file wiltab_dump.txt   as above.
    two keys:  $wilkey = wiltab key (in HK)  
               $slp1a = slp1 transliteration of wiltab key
*** input file   regexp-1-ma.txt
 This contains a rather complex 
Read lines from input file wiltab_dump.txt
Try to find $slp1a as an MW headword,

* step3-3a
This contains material from MA. It is the material
with which Sampada started
* step3-3b
wilSStil722PMStil946.xml is the end result of work done by Sampada,
and finished by Peter.  It was given to me on 8/10/2011.
The readme.txt file describes what ejf did.
Essentially,
 - correct wilSS.. re xml
 - remove a few records which required changes to MW
 - segregate the 200+ wilson changes.  From these, elsewhere,
   changes were made to the wiltab database.
 - some small number of miscellaneous comments were made by ejf.
* step3-3c  Nov 30, 2011 ejf
This constructs wilss-3-3c.xml and html from a corrected 
wilSStil722PMStil946.xml.  
lex.dtd (from MA's work) was slightly modified and wilSS also modified so
wilSS validates against lex.dtd.
wilss-3-3c.xml adds a 'corrected="yes"' attribute to the 200+ records for which
changes were made to wiltab (see step3-3b).  
The lex.dtd extended so it wilss-3-3c.xml also validates.
The html changed to include the wiltab corrections, and the <c> element and
attributes.
* step3-3d Dec 1, 2011
 constructs wilss-3-3d.xml from wilss-3-3c.xml, and 
wilss-3-3d.html from wilss-3-3d.xml.
The changes were suggested by Susan Moore, to make the end result of
changes more readily interpretable from the c attributes and text.
The lex.dtd was changed to reflected the new done="y" attribute of c.
 - add done="y" as attribute to all <c> elements, indicating these
   records are completed.
 - remove a "y" as the text contents of <c>; replace it with triple underscore
   remove a "y " as the initial part of text contents of <c>.
   Note: there are two aberrant instances, unchanged:
y WARN: <r><rule conf="LIKELY" class="VARIANT">v/b</rule> <c auth="SS" cclass="_" done="y">y-kuvera=kubera</c> <wil>kuveraka</wil> <mw>kuberaka</mw></r>
y WARN: <r><rule conf="LIKELY" class="VARIANT" corrected="y">b/v</rule> <c auth="PS" cclass="E" done="y">yes but alphabetic order is ambiguous, Wilson has 'vrata' not 'brata' and neither 'anuvrata' nor 'anubrata'</c> <wil err="scan" corr="samanuvrata">samanubrata</wil> <mw>samanuvrata</mw></r>

  In case this 'y-removal' left an empty text content to <c>, this empty
  content was changed to triple underscore.
 - changed instances of cclass="_" to agree with the class attribute of <rule>;
   e.g. 
     when class=GRAMMAR, cclass="-" changed to cclass="G".
     when class=ERROR, cclass="-" changed to cclass="E".
     when class=VARIANT, cclass="-" changed to cclass="V".
     otherwise, leave class="-".
     Note: this change was NOT made in case when mwkey=*.  In this 
     circumstance, there is no mapping in mw of the wiltab headword; 
     essentially, the cclass attribute is irrelevant.

   Note that when cclass was NOT "_", no change was made to it.

* step4  Dec 2, 2011
This begins the process of completing the task of explaining the words in
wiltab not in mw.
The work done by Sampada and Peter, and expressed currently by wilss-3-3d.xml
in step3-3d, was derived from work done by Matthias in step3-3.
The file wiltab_mw-3.3.txt (in step3-3) is the comprehensive list of
wiltab headwords not found in mw.
* step4/step4-1 Dec 2, 2011

Originally, the list that Sampada/Peter corrected was based on the
records of wiltab_mw-3-3.txt that had conf="LIKELY".  For various reasons,
5 of these records are not represented in wilss-3-3d.xml.  Why?
The step4-1-notes.txt file explains the discrepancies.
files wiltab_mw-4-1.txt and wilss-4-1.xml correct the discrepancies.
There are approximately 8350 records in wiltab_mw-4-1.txt, representing
wilson headwords not found in mw.  
wilss-4-1.xml explains 943 of these.
It remains to explain the rest.
* step4/step4-2 Dec 3, 2011
Here the inputs are the two files wiltab_mw-4-1.txt and wilss-4-1.xml. 
Also, lex.dtd
No changes are anticipated in wilss-4-1.xml: this is completed work.
The objectives here are to:
(a) get all the records in wiltab_mw-4-1.txt into a form validateable
    by lex.dtd  (we'll call it wilmw-4-2.xml)
(b) Do an initial partition of wilmw-4-2.xml into various piles:
   (b1)  conf=LIKELY  -  these are the ones corresponding to wilss-4-1.xml
                         they are done
   (b2)  conf=SURE    -  MA marked these as sure -  after a brief
                         perusal to confirm MA's assessment, these will also
                         be done.
   (b3)  conf=ROOT    -  some root problems.  Will prob. need corrections to
                         wiltab headwords.
   (b4)  NO conf      -  This is the hard part. Slightly below 5000 of these.


* step4/step4-3 Jan 2012
 This starts with the basic files of step4-2.
 Susan Moore edits some of the incompleted files.
** Jan-Mar, 2012: wiltab_mw-4-2-todo-issue-edit.xml

xmllint --noout --valid wiltab_mw-4-2-todo-issue-edit.xml
php html.php wiltab_mw-4-2-todo-issue-edit.xml wiltab_mw-4-2-todo-issue-edit.html

** Mar 8,2012: wiltab_mw-4-2-todo-variant-edit.xml

xmllint --noout --valid wiltab_mw-4-2-todo-variant-edit.xml
php html.php wiltab_mw-4-2-todo-variant-edit.xml wiltab_mw-4-2-todo-variant-edit.html

** Mar 13, 2010: wiltab_mw-4-2-todo-variant-edit1.xml
minor changes to variant-edit.xml;
 See ejf-variant-notes.txt.

xmllint --noout --valid wiltab_mw-4-2-todo-variant-edit1.xml
php html.php wiltab_mw-4-2-todo-variant-edit1.xml wiltab_mw-4-2-todo-variant-edit1.html
